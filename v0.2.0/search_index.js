var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API Reference","title":"API Reference","text":"CurrentModule = UncertainHistogramming","category":"page"},{"location":"api/#UncertainHistogramming-API","page":"API Reference","title":"UncertainHistogramming API","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Documentation for UncertainHistogramming.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [UncertainHistogramming]","category":"page"},{"location":"api/#UncertainHistogramming.moment_list","page":"API Reference","title":"UncertainHistogramming.moment_list","text":"const moment_list::SVector\n\nConvenience list of all moment type symbols used. Each of these  Symbols are @evaluated into an empty struct trait <: Moment.\n\nUncertainHistogramming.moment_list\n\n\n\n\n\n","category":"constant"},{"location":"api/#UncertainHistogramming.ContinuousDistribution","page":"API Reference","title":"UncertainHistogramming.ContinuousDistribution","text":"abstract type ContinuousDistribution end\n\nConcept establishing what a continuous distribution is within the code base. Here, as with ContinuousHistogram, the continuity refers to the domain of the distribution, and not necessarily its range.\n\n\n\n\n\n","category":"type"},{"location":"api/#UncertainHistogramming.ContinuousHistogram","page":"API Reference","title":"UncertainHistogramming.ContinuousHistogram","text":"abstract type ContinuousHistogram end\n\nabstract type representing the ContinuousHistogram concept. These are histograms whose input data have uncertainty associated with them, and therefore we build them using a value-error-dependent kernel for each entry.\n\nFor each new ContinuousHistogram, one must overload the functions given in each of the src/Kernels folder. Then one  needs to add a new ContinuousDistribution and define its methods, like those shown in the src/Moments files. Finally, the KernelDistribution must be mapped.\n\nThen all utility and stats functionality should just work.\n\nnote: Note\nIn this context, continuity refers to the domain of the histogram, and not necessarily its range.\n\n\n\n\n\n","category":"type"},{"location":"api/#UncertainHistogramming.GaussianDistribution","page":"API Reference","title":"UncertainHistogramming.GaussianDistribution","text":"GaussianDistribution <: ContinuousDistribution\n\nTrait representing a Gaussian distribution.\n\n\n\n\n\n","category":"type"},{"location":"api/#UncertainHistogramming.GaussianHistogram","page":"API Reference","title":"UncertainHistogramming.GaussianHistogram","text":"GaussianHistogram{T <: Number} <: ContinuousHistogram\n\nA ContinuousHistogram with a Gaussian kernel for each value-error pair.\n\nThis [ContinuousHistogram] is formed by summing Gaussian kernels for each (mu_i sigma_i) as\n\nmathcalH(y) = frac1M sum_i = 1^M G(y mu_i sigma_i)\n\nwhere \n\nG(y mu_i sigma_i) = frac expleft -frac left( y - mu_i right)^2 2 sigma_i^2 right  sigma_i sqrt2pi\n\nThis expression makes the calculation of the non-central moment a simple mean of the  individual non-central moment.\n\nContents\n\nmoments::Vector{T}: a collection of moments for the GaussianHistogram which are updated in an online fashion\nvalues::Vector{T}: the values used to construct the GaussianHistogram\nerrors::Vector{T}: the errors used to construct the GaussianHistogram\n\nnote: Note\nThe statistics come from calculations involving the moment. The values and  errors are necessarily stored for visualization purposes.\n\n\n\n\n\n","category":"type"},{"location":"api/#UncertainHistogramming.Moment","page":"API Reference","title":"UncertainHistogramming.Moment","text":"abstract type Moment end\n\nConcept representing non-central statistical moments.\n\n\n\n\n\n","category":"type"},{"location":"api/#UncertainHistogramming.UniformDistribution","page":"API Reference","title":"UncertainHistogramming.UniformDistribution","text":"UniformDistribution <: ContinuousDistribution\n\nTrait representing a uniform distribution.\n\n\n\n\n\n","category":"type"},{"location":"api/#UncertainHistogramming.UniformHistogram","page":"API Reference","title":"UncertainHistogramming.UniformHistogram","text":"UniformHistogram{T <: Number} <: ContinuousHistogram\n\nA ContinuousHistogram with a uniform kernel for each value-error pair.\n\nThis [ContinuousHistogram] is formed by summing uniform kernels for each (x_i epsilon_i) as\n\nmathcalH(y) = frac1M sum_i = 1^M mathcalU(y x_i epsilon_i)\n\nwhere \n\nmathcalU(y x_i epsilon_i) = begincases\nfrac12epsilon_i  y in (x_i - epsilon_i x_i + epsilon_i)\n\n0  mathrmotherwise\nendcases\n\nThese expression makes the calculation of the non-central moments a simple mean of the  individual non-central moment.\n\nContents\n\nmoments::Vector{T}: a collection of moments for the UniformHistogram which are updated in an online fashion\nvalues::Vector{T}: the values used to construct the UniformHistogram\nerrors::Vector{T}: the errors used to construct the UniformHistogram\n\nnote: Note\nThe statistics come from calculations involving the moment. The values and  errors are necessarily stored for visualization purposes.\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.eltype-Tuple{ContinuousHistogram}","page":"API Reference","title":"Base.eltype","text":"eltype(::ContinuousHistogram)\n\nBase overload for accessing the eltype.\n\njulia> eltype(GaussianHistogram())\nFloat64\n\njulia> eltype(UniformHistogram{Float32}())\nFloat32\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.getindex","page":"API Reference","title":"Base.getindex","text":"getindex(::ContinuousHistogram, ::Type{<: Moment})\n\nConvenience function to access a given Moment from its name.\n\njulia> hist = GaussianHistogram();\n\njulia> push!(hist, (0, 1))\nGaussianHistogram{Float64}:\n  length  = 1\n  moments = 0.0  1.0  0.0  3.0  \n\n  Statistics\n    mean        = 0.0\n    variance    = 1.0\n    skewness    = 0.0\n    kurtosis    = 0.0\n\njulia> hist[FirstMoment]\n0.0\n\njulia> hist[SecondMoment]\n1.0\n\njulia> hist[ThirdMoment]\n0.0\n\njulia> hist[FourthMoment]\n3.0\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.length-Tuple{ContinuousHistogram}","page":"API Reference","title":"Base.length","text":"length(::ContinuousHistogram)\n\nBase overload to return the length of the values Vector in the argument ContinuousHistogram.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.push!-Tuple{ContinuousHistogram, Tuple{Number, Number}}","page":"API Reference","title":"Base.push!","text":"push!(::ContinuousHistogram, ::Tuple{Number, Number})\npush!(::ContinuousHistogram, ::Measurement)\npush!(::ContinuousHistogram, ::AbstractVector)\npush!(::ContinuousHistogram, ::Vector{Measurement})\n\nBase overload to introduce a new value-error pair into the ContinuousHistogram. This function also _update_moments! in an amortized way to add little overhead.\n\nnote: Note\nThe AbstractVector dispatch is really only meant for Vector{Tuple{Number, Number}};  the latter of which contains no subtypes.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.setindex!","page":"API Reference","title":"Base.setindex!","text":"setindex!(::ContinuousHistogram, val, ::Type{<: Moment})\n\nConvenience function for accessing the ContinuousHistogram Moments from their name.\n\nwarning: Warning\nThis functionality should only be used internally as modifying the ContinuousHistogram moments directly would invalidate the push! pipeline and ultimately the statistics.But it's here if you need it for some dev reason.\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.show-Tuple{IO, ContinuousHistogram}","page":"API Reference","title":"Base.show","text":"show([::IO = stdout], ::ContinuousHistogram)\nshow(::ContinuousHistogram)\n\nprint the relevant information for a ContinuousHistogram.\n\n\n\n\n\n","category":"method"},{"location":"api/#Measurements.measurement-Tuple{ContinuousHistogram}","page":"API Reference","title":"Measurements.measurement","text":"measurement(::ContinuousHistogram)\n\nInterface to Measurements.jl.  Return a Measurement with val as the ContinuousHistogram mean and the  err as the ContinuousHistogram std (standard deviation).\n\nwarning: Warning\nIf the ContinuousHistogram in question is severely non-Gaussian, the first  two statistical cumulants may be insufficient to appropriately describe the underlying distribution. In this sense,  a measurement = value Â± error may not make sense to describe one's data.\n\n\n\n\n\n","category":"method"},{"location":"api/#Statistics.mean-Tuple{ContinuousHistogram}","page":"API Reference","title":"Statistics.mean","text":"mean(::ContinuousHistogram)\n\nFirst moment of the ContinuousHistogram.\n\n\n\n\n\n","category":"method"},{"location":"api/#Statistics.std-Tuple{ContinuousHistogram}","page":"API Reference","title":"Statistics.std","text":"std(::ContinuousHistogram)\n\nThe standard deviation of the ContinuousHistogram.\n\n\n\n\n\n","category":"method"},{"location":"api/#Statistics.var-Tuple{ContinuousHistogram}","page":"API Reference","title":"Statistics.var","text":"var(::ContinuousHistogram)\n\nSecond cumulant of the ContinuousHistogram.\n\n\n\n\n\n","category":"method"},{"location":"api/#StatsBase.kurtosis","page":"API Reference","title":"StatsBase.kurtosis","text":"kurtosis(::ContinuousHistogram [, excess = true ])\n\nPearson (excess) kurtosis of a ContinuousHistogram.\n\nnote: Note\nFor comparison purposes, this kurtosis definition, with excess == true, applied to a  Gaussian distribution yields 0. If excess == false, then the kurtosis for a Gaussian is 3.\n\n\n\n\n\n","category":"function"},{"location":"api/#StatsBase.skewness-Tuple{ContinuousHistogram}","page":"API Reference","title":"StatsBase.skewness","text":"skewness(::ContinuousHistogram)\n\nFisher's skewness of a ContinuousHistogram.\n\nnote: Note\nFor comparison purposes, this skewness definition applied to a Gaussian distribution yields identically zero.\n\n\n\n\n\n","category":"method"},{"location":"api/#UncertainHistogramming.KernelDistribution-Tuple{ContinuousHistogram}","page":"API Reference","title":"UncertainHistogramming.KernelDistribution","text":"KernelDistribution(::ContinuousHistogram) -> MethodError\nKernelDistribution(::GaussianHistogram)   -> GaussianDistribution\nKernelDistribution(::UniformHistogram)    -> UniformDistribution\n\nInterface function that assigns a ContinuousHistogram Type to  a specific kernel distribution.\n\n\n\n\n\n","category":"method"},{"location":"api/#UncertainHistogramming.MomentIndex-Tuple{Type{<:UncertainHistogramming.Moment}}","page":"API Reference","title":"UncertainHistogramming.MomentIndex","text":"MomentIndex(::Type{<: Moment}) = -1\n\nMapping from <: Moment traits to indexable integers. \n\n\n\n\n\n","category":"method"},{"location":"api/#UncertainHistogramming._online_mean-Tuple{Any, Any, Any}","page":"API Reference","title":"UncertainHistogramming._online_mean","text":"_online_mean(xnew, Î¼old, nold)\n\nUpdate the old mean Î¼old over nold elements with the new data point xnew. This function implements\n\nmu_n+1 = mu_n + fracx_n+1 - mu_nn+1\n\n\n\n\n\n","category":"method"},{"location":"api/#UncertainHistogramming._update_moment!-Tuple{ContinuousHistogram, Any, Any, Any}","page":"API Reference","title":"UncertainHistogramming._update_moment!","text":"_update_moment!(::ContinuousHistogram, moment_t, val, err)\n\nUpdate the ContinuousHistogram's moment_t using an _online_mean with the inclusion of the value-error pair (val, err).\n\n\n\n\n\n","category":"method"},{"location":"api/#UncertainHistogramming._update_moments!-Tuple{ContinuousHistogram, Any, Any}","page":"API Reference","title":"UncertainHistogramming._update_moments!","text":"_update_moments!(::ContinuousHistogram, val, err)\n\nUpdate the the non-central moments of the ContinuousHistogram online with the new value-error pair (val, err). This is done because each is non-central moment is the mean non-central moments of each ContinuousDistribution.\n\n\n\n\n\n","category":"method"},{"location":"api/#UncertainHistogramming.construct!-Tuple{Any, ContinuousHistogram, Any}","page":"API Reference","title":"UncertainHistogramming.construct!","text":"construct!(output, ::ContinuousHistogram, x)\n\nSimilar to construct but here, the output Array is modified in-place.\n\n\n\n\n\n","category":"method"},{"location":"api/#UncertainHistogramming.construct-Tuple{ContinuousHistogram, Any}","page":"API Reference","title":"UncertainHistogramming.construct","text":"construct(::ContinuousHistogram, x)\n\nMap the values of x through the [ContinuousHistogram] and return an Array of the same size as x.\n\n\n\n\n\n","category":"method"},{"location":"api/#UncertainHistogramming.gaussian-Tuple{Number, Any, Any}","page":"API Reference","title":"UncertainHistogramming.gaussian","text":"gaussian(::Number, Î¼, Ï)\ngaussian(::AbstractArray, Î¼, Ï)\n\nCalculate the normalized value of a Gaussian with mean Î¼ and variance ÏÂ².\n\n\n\n\n\n","category":"method"},{"location":"api/#UncertainHistogramming.kernel-Tuple{ContinuousHistogram, Vararg{Any}}","page":"API Reference","title":"UncertainHistogramming.kernel","text":"kernel(::ContinuousHistogram, ::AbstractArray, data) -> MethodError\nkernel(::GaussianHistogram, ::AbstractArray, data)\nkernel(::UniformHistogram, ::AbstractArray, data)\n\nThe kernel function mathcalK(x) used to compute a ContinuousHistogram such that\n\nmathcalH(x) = sum_i = 1^M mathcalK_i(x)\n\nwhere M is the total number of data points. For brevity, we have represented all data-dependence through the subscript i. \n\nnote: Note\nBy default, we MethodError out for any <: ContinuousHistogram until its directly implemented.\n\n\n\n\n\n","category":"method"},{"location":"api/#UncertainHistogramming.moment","page":"API Reference","title":"UncertainHistogramming.moment","text":"moment(::ContinuousHistogram, ::Type{<: Moment})\n\nConvenience wrapper to return a Moment from a ContinuousHistogram  by that Moment's name.\n\njulia> hist = GaussianHistogram();\n\njulia> push!(hist, (0, 1))\nGaussianHistogram{Float64}:\n  length  = 1\n  moments = 0.0  1.0  0.0  3.0  \n\n  Statistics\n    mean        = 0.0\n    variance    = 1.0\n    skewness    = 0.0\n    kurtosis    = 0.0\n\njulia> moment(hist, FirstMoment)\n0.0\n\njulia> moment(hist, SecondMoment)\n1.0\n\njulia> moment(hist, ThirdMoment)\n0.0\n\njulia> moment(hist, FourthMoment)\n3.0\n\n\n\n\n\n","category":"function"},{"location":"api/#UncertainHistogramming.moment-Tuple{Type{UncertainHistogramming.GaussianDistribution}, Type{FirstMoment}, Any, Any}","page":"API Reference","title":"UncertainHistogramming.moment","text":"moment(::Type{GaussianDistribution}, FirstMoment, Î¼, Ï)\n\nAnalytic expression for the no-central FirstMoment from a GaussianDistribution:\n\nM_1 = int_-infty^infty rm dy G(ymusigma)cdot y = mu \n\n\n\n\n\n","category":"method"},{"location":"api/#UncertainHistogramming.moment-Tuple{Type{UncertainHistogramming.GaussianDistribution}, Type{FourthMoment}, Any, Any}","page":"API Reference","title":"UncertainHistogramming.moment","text":"moment(::Type{GaussianDistribution}, FourthMoment, Î¼, Ï)\n\nAnalytic expression for the no-central FourthMoment from a GaussianDistribution:\n\nM_4 = int_-infty^infty rm dy G(ymusigma)cdot y^4 = mu^4 + 6mu^2sigma^2 + 3sigma^4 \n\n\n\n\n\n","category":"method"},{"location":"api/#UncertainHistogramming.moment-Tuple{Type{UncertainHistogramming.GaussianDistribution}, Type{SecondMoment}, Any, Any}","page":"API Reference","title":"UncertainHistogramming.moment","text":"moment(::Type{GaussianDistribution}, SecondMoment, Î¼, Ï)\n\nAnalytic expression for the no-central SecondMoment from a GaussianDistribution:\n\nM_2 = int_-infty^infty rm dy G(ymusigma)cdot y^2 = mu^2 + sigma^2 \n\n\n\n\n\n","category":"method"},{"location":"api/#UncertainHistogramming.moment-Tuple{Type{UncertainHistogramming.GaussianDistribution}, Type{ThirdMoment}, Any, Any}","page":"API Reference","title":"UncertainHistogramming.moment","text":"moment(::Type{GaussianDistribution}, ThirdMoment, Î¼, Ï)\n\nAnalytic expression for the no-central ThirdMoment from a GaussianDistribution:\n\nM_3 = int_-infty^infty rm dy G(ymusigma)cdot y^3 = mu^3 + 3musigma^2 \n\n\n\n\n\n","category":"method"},{"location":"api/#UncertainHistogramming.moment-Tuple{Type{UncertainHistogramming.UniformDistribution}, Type{FirstMoment}, Any, Any}","page":"API Reference","title":"UncertainHistogramming.moment","text":"moment(::Type{UniformDistribution}, FirstMoment, val, err)\n\nAnalytic expression for the no-central FirstMoment from a UniformDistribution:\n\nM_1 = int_-infty^infty rm dy mathcalU(y x epsilon)cdot y = x \n\n\n\n\n\n","category":"method"},{"location":"api/#UncertainHistogramming.moment-Tuple{Type{UncertainHistogramming.UniformDistribution}, Type{FourthMoment}, Any, Any}","page":"API Reference","title":"UncertainHistogramming.moment","text":"moment(::Type{UniformDistribution}, FourthMoment, val, err)\n\nAnalytic expression for the no-central FourthMoment from a UniformDistribution:\n\nM_4 = int_-infty^infty rm dy mathcalU(y x epsilon)cdot y^4 = x^4 + 2x^2epsilon^2 + frac15epsilon^4 \n\n\n\n\n\n","category":"method"},{"location":"api/#UncertainHistogramming.moment-Tuple{Type{UncertainHistogramming.UniformDistribution}, Type{SecondMoment}, Any, Any}","page":"API Reference","title":"UncertainHistogramming.moment","text":"moment(::Type{UniformDistribution}, SecondMoment, val, err)\n\nAnalytic expression for the no-central SecondMoment from a UniformDistribution:\n\nM_2 = int_-infty^infty rm dy mathcalU(y x epsilon)cdot y^2 = x^2 + frac13epsilon^2 \n\n\n\n\n\n","category":"method"},{"location":"api/#UncertainHistogramming.moment-Tuple{Type{UncertainHistogramming.UniformDistribution}, Type{ThirdMoment}, Any, Any}","page":"API Reference","title":"UncertainHistogramming.moment","text":"moment(::Type{UniformDistribution}, ThirdMoment, val, err)\n\nAnalytic expression for the no-central ThirdMoment from a UniformDistribution:\n\nM_3 = int_-infty^infty rm dy mathcalU(y x epsilon)cdot y^3 = xleft(x^2 + epsilon^2 right) \n\n\n\n\n\n","category":"method"},{"location":"api/#UncertainHistogramming.uniform_function-Tuple{Number, Any, Any}","page":"API Reference","title":"UncertainHistogramming.uniform_function","text":"uniform_function(::Number, Î¼, Ï)\nuniform_function(::AbstractArray, Î¼, Ï)\n\nCalculate the normalized value of a uniform distribution centered at val that extends out by err above and below.\n\n\n\n\n\n","category":"method"},{"location":"api/#UncertainHistogramming.val_err-Tuple{ContinuousHistogram, Any}","page":"API Reference","title":"UncertainHistogramming.val_err","text":"val_err(::ContinuousHistogram, idx)\n\nReturn a (value, error)-Tuple.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = UncertainHistogramming","category":"page"},{"location":"#UncertainHistogramming-[![GithubLink](assets/GitHub-Mark-Light-32px.png)](https://github.com/meese-wj/UncertainHistogramming.jl)","page":"Home","title":"UncertainHistogramming (Image: GithubLink)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Have you ever had a situation where you need to visualize a set of data as a histogram, except the data you have to visualize are each endowed with some amount of uncertainty? If so, this package is for you! UncertainHistogramming.jl is a lightweight Julia package to plot a density function for a given set of values with known uncertainties.","category":"page"},{"location":"#Background-Information","page":"Home","title":"Background Information","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"An example application of the main exported abstract struct, ContinuousHistogram, is to visualize a \"histogram\" of experimental values, when each value has a measured experimental uncertainty. This is to be contrast with normal Histogramming that assumes that each value is exact, meaning its uncertainty is zero().","category":"page"},{"location":"","page":"Home","title":"Home","text":"For me, the need for this package first came about when I was running Monte Carlo simulations, where I needed to understand the underlying distribution of some observables. But, as anybody who has ever played around with Monte Carlo methods knows, each observable has a certain amount of statistical error. Thus, any regular histogram I would make when ignoring these statistical errors would not really expose the true distribution, as each data point could not entirely be claimed by a single histogram bin. So I invented the ContinuousHistogram as a somewhat tongue-in-cheek generalization of the regular histogram that takes data uncertainty into account.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides similar functionality to what is expected from kernel density estimation (KDE), but here the data errors/uncertainties which act as the kernel bandwidths are all, in principle, different.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nA ContinuousHistogram is continuous in the sense of its domain. This is admittedly a bit confusion, but the discretization that occurs in a regular histogram comes from its bins, or its domain, not its range. Of course, the range, or vertical values, are jumpy, but that is because of the discrete nature of the regular histogram. Most kernel functions that exist are at least piecewise continuous in their range, which is the same standard we take here.","category":"page"},{"location":"#Available-[ContinuousHistogram](@ref)s","page":"Home","title":"Available ContinuousHistograms","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We currently offer the following ContinuousHistograms which implement their designated KernelDistribution and kernel functions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"The GaussianHistogram built on GaussianDistributions","category":"page"},{"location":"","page":"Home","title":"Home","text":"G(y mu_i sigma_i) = frac expleft -frac left( y - mu_i right)^2 2 sigma_i^2 right  sigma_i sqrt2pi","category":"page"},{"location":"","page":"Home","title":"Home","text":"The UniformHistogram built on UniformDistributions","category":"page"},{"location":"","page":"Home","title":"Home","text":"mathcalU(y x_i epsilon_i) = begincases\nfrac12epsilon_i  y in (x_i - epsilon_i x_i + epsilon_i)\n\n0  mathrmotherwise\nendcases","category":"page"},{"location":"","page":"Home","title":"Home","text":"Each ContinuousHistogram are built around value-error pairs. For example, with the GaussianHistogram, the value-error pair are the mean and standard deviation of that gaussian.","category":"page"},{"location":"#Example-Usage","page":"Home","title":"Example Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"An example ContinuousHistogram can be constructed from the following Julia code for a simple Vector of value-error Tuples.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To start, first include the following packages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Plots # One must Pkg.add this separately\nusing UncertainHistogramming\nPlots.gr()  # Use GR to reproduce the plot exactly\nnothing # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"Next, define a list of (value, error)-Tuples:","category":"page"},{"location":"","page":"Home","title":"Home","text":"values_errors = [(-3.5, 0.5), \n                 (-1.5, 0.75),\n                 (0, 0.25), \n                 (1.5, 0.75), \n                 (3.5, 0.5)]\nnothing # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"From here, we're in the position to initialize both a GaussianHistogram ghist and a UniformHistogram uhist, and then push! the values_errors Vector into them.","category":"page"},{"location":"","page":"Home","title":"Home","text":"ghist = GaussianHistogram()\nuhist = UniformHistogram()\npush!(ghist, values_errors)\npush!(uhist, values_errors)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that the non-central statistical moments are updated in an online matter. This means that, aside from the overhead associated with push!ing two elements into the ContinuousHistogram's values and errors Vectors, there is an amortized cost associated with computing the statistics.","category":"page"},{"location":"","page":"Home","title":"Home","text":"From here, we just need to define an input domain for the ContinuousHistograms to be computed over as","category":"page"},{"location":"","page":"Home","title":"Home","text":"x = LinRange(-6, 6, 3000)","category":"page"},{"location":"","page":"Home","title":"Home","text":"and then, with the help of Plots.jl and RecipesBase.jl, we have","category":"page"},{"location":"","page":"Home","title":"Home","text":"plot( plot(x, ghist; title = \"\\$ \\\\mathtt{GaussianHistogram}ming \\$\"), \n      plot(x, uhist; title = \"\\$ \\\\mathtt{UniformHistogram}ming \\$\"); \n      size = (800, 600), \n      layout = (1, 2), \n      link = :both )","category":"page"},{"location":"","page":"Home","title":"Home","text":"In the left plot, one can see that the GaussianHistogram is plotted as the solid blue curve, and the individual gaussian kernels that make it up are plotted as the dashed orange curves. The right plot shows the same set of curves defined by the UniformDistribution, instead. (The orange curves are only zero within their visible range; otherwise they are hidden by the solid blue curve.) ","category":"page"},{"location":"","page":"Home","title":"Home","text":"I want to remark here that with the power of Julia's multiple dispatch, once one properly defines the interface for a new type of ContinuousHistogram, the plotting functionality, along with the utilities and statistics, just work.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nOne may also supply the keyword argument nkernels to plot(x, hist) to change the number of kernels displayed. By default, nkernels == 5. If the number of value-error pairs exceeds nkernels, that is nkernels < length(hist), then no kernels will be shown to save the end user from trying to understand and overly busy plot.","category":"page"},{"location":"#Add-[UncertainHistogramming.jl](https://github.com/meese-wj/UncertainHistogramming.jl)-to-your-Julia-environment","page":"Home","title":"Add UncertainHistogramming.jl to your Julia environment","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To add UncertainHistogramming.jl simply press ] in the Julia REPL to enter pkg mode and type","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add UncertainHistogramming","category":"page"},{"location":"","page":"Home","title":"Home","text":"and presto! You now have full access to UncertainHistogramming.jl.","category":"page"}]
}
